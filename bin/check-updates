#!/bin/bash

set -euo pipefail

action=${1:-check}

available=0
applied=0

red=$(tput setaf 1)
green=$(tput setaf 2)
reset=$(tput sgr0)
bold=$(tput bold)

(cd .ws && git pull)

urlencode() {
  printf %s "$1" | jq -s -R -r @uri
}

function check {
  repo=$1
  current=$2
  latest=$3

  if [[ "$latest" != "$current" ]]; then
    echo "${red}* Update for $repo available $latest (current $current)${reset}"
    available=$((available + 1))

    if [[ -f .ws.config.yaml && $action == "apply" ]]; then
      sed -i --follow-symlinks "s|\(\s*\)$repo: .*|\1$repo: $latest|g" .ws/config.yaml
      applied=$((applied + 1))
    fi
  else
    echo "${green}- $repo up to date ($current)${reset}"
  fi

}

function github {
  repo=$1
  path=$2
  curl --config "${curl_cfg}" -sf --show-error "https://api.github.com/repos/${repo}/${path}" "${@:3}"
}

curl_cfg=$(mktemp)
if [[ -n "${GH_BASIC_AUTH:-}" ]]; then
  echo "user = \"$GH_BASIC_AUTH\"" >"$curl_cfg"
fi
trap 'rv=$?; rm -f $curl_cfg; exit $rv' 0 2 3 15

for component in $(echo "$GITHUB_VERSIONS" | jq -cM 'to_entries | .[]'); do
  repo=$(echo "$component" | jq -r '.key')
  current=$(echo "$component" | jq -r '.value')

  latest=$(github "${repo}" "releases/latest" | jq -r '.tag_name' | sed 's/^v*//g')

  if [[ "$latest" == "null" ]]; then
    echo "! Cannot get latest version for $repo"
  else
    check "$repo" "$current" "$latest"
  fi
done

for component in $(echo "$PIP_VERSIONS" | jq -cM 'to_entries | .[]'); do
  repo=$(urlencode "$(echo "$component" | jq -r '.key' | sed 's/\[.*\]//')")
  current=$(echo "$component" | jq -r '.value')

  set +e
  latest=$(curl -sf --show-error "https://pypi.org/pypi/${repo}/json" | jq -r '.info.version')
  status=$?
  set -e

  if [ $status ]; then
    check "$repo" "$current" "$latest"
  fi
done

#neovim
current=$(nvim -v | head -n1 | sed -E 's/^.*v//')
latest=$(curl -sf --show-error https://raw.githubusercontent.com/neovim/neovim/stable/runtime/nvim.appdata.xml | grep '<release ' | head -n1 | sed -E 's/^.*version="(\S*)".*$/\1/')
check "neovim/neovim" "$current" "$latest"

# kubectl
if command -v kubectl &>/dev/null; then
  current=$(kubectl version --client -o json | jq -r '.clientVersion.gitVersion' | sed 's/^v*//g')
  latest=$(curl -sf --show-error https://storage.googleapis.com/kubernetes-release/release/stable.txt | sed 's/^v*//g')
  check "kubernetes/kubectl" "$current" "$latest"
fi

# golang
if [[ -n "${GOLANG_VERSION:-}" ]]; then
  current=$GOLANG_VERSION
  latest=$(curl -sf --show-error "https://go.dev/VERSION?m=text" | head -n1 | sed 's/^go//g')
  check "golang/go" "$current" "$latest"
fi

#awscli
current=$AWS_CLI_VERSION
latest=$(github "aws/aws-cli" "tags" | jq -r '[.[] | select( .name | test("^2")) | .name][0]')
check "aws/aws-cli" "$current" "$latest"

#gcloud
if [[ -n "${GCLOUD_CLI_VERSION:-}" ]]; then
  current=$GCLOUD_CLI_VERSION
  latest=$(github "GoogleCloudPlatform/cloud-sdk-docker" "tags" | jq -r '[.[] | select( .name | test("^\\d")) | .name][0]')
  check "GoogleCloudPlatform/cloud-sdk-docker" "$current" "$latest"
fi

op update

if [[ $applied -ne 0 ]]; then
  echo "${red}${bold}Rebuild your Docker image with new versions${reset}"
  echo "${red}${bold}Don't forget to push updates to git repo${reset}"
  echo "${red}${bold}( cd .ws && git add config.yaml && git commit -m 'Tools upgrade' && git push )${reset}"
elif [[ $available -ne 0 ]]; then
  echo "${red}${bold}New (${available}) updates are available${reset}"
fi

exit $available
